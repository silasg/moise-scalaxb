// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package oml

case class OsType(properties: Option[oml.PropertiesType],
  structuralspecification: oml.SsType,
  functionalspecification: Option[oml.FsType],
  normativespecification: Option[oml.NsType],
  id: Option[String] = None,
  osversion: String)


case class Roledefinitions(role: oml.RoleDefType*)


case class Linktype(id: String)


case class Linktypes(linktype: oml.Linktype*)


case class SsType(properties: Option[oml.PropertiesType],
  roledefinitions: Option[oml.Roledefinitions],
  linktypes: Option[oml.Linktypes],
  groupspecification: Option[oml.GroupSpecificationType])


case class Goal(id: String)


case class Preferred(mission: String)


case class Mission(properties: Option[oml.PropertiesType],
  goal: Seq[oml.Goal],
  preferred: Seq[oml.Preferred],
  id: String,
  min: Option[BigInt] = None,
  max: Option[BigInt] = None)


case class Scheme(properties: Option[oml.PropertiesType],
  goal: oml.GoalDefType,
  mission: Seq[oml.Mission],
  id: Option[String] = None,
  monitoringscheme: Option[String] = None)


case class FsType(properties: Option[oml.PropertiesType],
  scheme: Seq[oml.Scheme])


case class Norm(id: String,
  condition: Option[String] = None,
  role: String,
  typeValue: String,
  mission: String,
  timeconstraint: Option[String] = None)


case class NsType(properties: Option[oml.PropertiesType],
  norm: Seq[oml.Norm])


case class Property(id: String,
  value: String)


case class PropertiesType(propertiestypesequence1: oml.PropertiesTypeSequence1*)

case class PropertiesTypeSequence1(property: oml.Property)

case class Extends(role: Option[String] = None)


case class RoleDefType(properties: Option[oml.PropertiesType],
  extendsValue: Seq[oml.Extends],
  id: String)

trait ScopeType

object ScopeType {
  def fromString(value: String): ScopeType = value match {
    case "intra-group" => Intragroup
    case "inter-group" => Intergroup

  }
}

case object Intragroup extends ScopeType { override def toString = "intra-group" }
case object Intergroup extends ScopeType { override def toString = "inter-group" }

trait CardinalityObjectType

object CardinalityObjectType {
  def fromString(value: String): CardinalityObjectType = value match {
    case "role" => RoleValue
    case "group" => Group

  }
}

case object RoleValue extends CardinalityObjectType { override def toString = "role" }
case object Group extends CardinalityObjectType { override def toString = "group" }


case class Role(id: Option[String] = None,
  min: Option[BigInt] = None,
  max: Option[BigInt] = None)


case class Roles(role: oml.Role*)


case class Link(from: Option[String] = None,
  to: Option[String] = None,
  typeValue: Option[String] = None,
  scope: oml.ScopeType,
  extendssubgroups: Boolean,
  bidir: Boolean)


case class Links(link: oml.Link*)


case class Includegroupspecification(uri: Option[String] = None)


case class Subgroups(includegroupspecification: Seq[oml.Includegroupspecification],
  groupspecification: Seq[oml.GroupSpecificationType])


case class Cardinality(min: Option[BigInt] = None,
  max: Option[BigInt] = None,
  objectValue: oml.CardinalityObjectType,
  id: String)


case class Compatibility(from: String,
  to: String,
  scope: oml.ScopeType,
  extendssubgroups: Boolean,
  bidir: Boolean,
  typeValue: Option[String] = None)


case class Formationconstraints(cardinality: Seq[oml.Cardinality],
  compatibility: Seq[oml.Compatibility])


case class GroupSpecificationType(roles: Option[oml.Roles],
  links: Option[oml.Links],
  subgroups: Seq[oml.Subgroups],
  formationconstraints: Option[oml.Formationconstraints],
  id: String,
  min: Option[BigInt] = None,
  max: Option[BigInt] = None,
  monitoringscheme: Option[String] = None)


case class PlanType(properties: Option[oml.PropertiesType],
  goal: Seq[oml.GoalDefType],
  operator: oml.PlanOperatorType,
  successrate: Option[Double] = None)


case class GoalDefType(argument: Seq[oml.ArgumentType],
  plan: Option[oml.PlanType],
  id: String,
  min: Option[BigInt] = None,
  ds: Option[String] = None,
  typeValue: Option[oml.GoalType] = None,
  ttf: Option[String] = None)


case class ArgumentType(id: String,
  value: Option[String] = None)

trait PlanOperatorType

object PlanOperatorType {
  def fromString(value: String): PlanOperatorType = value match {
    case "sequence" => Sequence
    case "choice" => Choice
    case "parallel" => Parallel

  }
}

case object Sequence extends PlanOperatorType { override def toString = "sequence" }
case object Choice extends PlanOperatorType { override def toString = "choice" }
case object Parallel extends PlanOperatorType { override def toString = "parallel" }

trait GoalType

object GoalType {
  def fromString(value: String): GoalType = value match {
    case "achievement" => Achievement
    case "maintenance" => Maintenance

  }
}

case object Achievement extends GoalType { override def toString = "achievement" }
case object Maintenance extends GoalType { override def toString = "maintenance" }

